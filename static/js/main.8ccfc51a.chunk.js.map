{"version":3,"sources":["components/Modal/Modal.tsx","components/Main/Main.tsx","components/Nav/FilterDrop.tsx","components/Nav/Nav.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Modal","share","setToggleModal","createdDate","created","split","className","style","position","width","minWidth","maxWidth","zIndex","top","left","transform","padding","paddingTop","paddingBottom","borderRadius","overflow","onClick","type","src","image","alt","name","replace","paddingLeft","paddingRight","fontSize","classNames","status","species","gender","href","location","url","origin","episode","map","ep","index","length","Main","data","shareChar","c","id","FilterDrop","getter","setter","list","header","useState","toggleFilter","setToggleFilter","xmlns","height","fill","viewBox","d","value","Nav","info","changePage","prevPage","currentPage","nextPage","setStatus","searchWithFilters","clearFilters","setGender","setType","setName","setSpecies","nameSearch","useRef","pages","i","push","onChange","current","ref","placeholder","prev","p","next","count","App","setData","setInfo","setShare","setCurrentPage","toggleModal","baseUrl","useEffect","axios","get","then","res","results","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8ccfc51a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport {CharType} from \"../../TypeScript/Types\";\r\nimport CSS from 'csstype';\r\n\r\ntype PropsType = {\r\n    share: CharType,\r\n    setToggleModal: (b: boolean) => void\r\n}\r\n\r\nconst Modal: React.FC<PropsType> = ({share, setToggleModal}) => {\r\n\r\n    let createdDate: Array<string> = share.created.split('T')\r\n\r\n    const customPopup: CSS.Properties = {\r\n        position: \"fixed\",\r\n        width: '90%',\r\n        minWidth: '280px',\r\n        maxWidth: '870px',\r\n        zIndex: 2,\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%,-50%)',\r\n        padding: '25px',\r\n        paddingTop: '25px',\r\n        paddingBottom: '35px',\r\n        borderRadius: '14px',\r\n\r\n    }\r\n    const alignArticleCenter: CSS.Properties = {\r\n        paddingLeft: '20',\r\n        paddingRight: '20',\r\n        paddingBottom: '20',\r\n        fontSize: `1.2em`,\r\n    }\r\n    return <div className=\"card  col\" style={customPopup}>\r\n        <div className=\"row  g-0\" style={{\r\n            overflow: 'auto'\r\n        }}>\r\n            <div className='col-md-12 d-flex justify-content-end '>\r\n                <button onClick={() => setToggleModal(false)} type=\"button\" className=\"btn-close\"/>\r\n            </div>\r\n            <div className=\"col-sm-6 overflow-hidden\">\r\n                <img className='w-100' src={share.image} alt={share.name}/>\r\n                <p className='card-text'><small\r\n                    className='text-muted'>created: </small>{createdDate[0].replace(/-/g, '.')}</p>\r\n            </div>\r\n            <div className=\"col-sm-6\" style={alignArticleCenter}>\r\n                <h2 className=\"card-title\">{share.name}</h2>\r\n                <ul className=\"card-text list-group list-group-flush\">\r\n\r\n                    <li className='list-group-item'> status: <span className={classNames({\r\n                        \"badge bg-secondary\": share.status === 'unknown',\r\n                        \"badge bg-success\": share.status === 'Alive',\r\n                        \"badge bg-danger\": share.status === 'Dead',\r\n                    })}> {share.status}</span> <br/>\r\n                    </li>\r\n                    <li className='list-group-item'>\r\n                        species: {share.species}<br/>\r\n                    </li>\r\n                    <li className='list-group-item'>\r\n                        gender: {share.gender}<br/>\r\n                    </li>\r\n                    <li className='list-group-item'>\r\n                        type: {share.type}\r\n                    </li>\r\n                    <li className='list-group-item'>\r\n\r\n                        location: <a className=\"link-info\" href={share.location.url}> {share.location.name} </a>\r\n                    </li>\r\n                    <li className='list-group-item'>\r\n\r\n                        origin: {share.origin.name === \"unknown\" ? <span> {share.origin.name}</span> :\r\n                        <a className=\"link-info\" href={share.origin.url}> {share.origin.name} </a>}\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n        <div className=\"col-md-12 mt-3\">\r\n            <h3>Episodes</h3>\r\n            {share.episode.map((ep: string, index: number) => (index < 9)\r\n                ? <span key={index}><a href={ep} className=\"link-info\">{ep}</a> </span> : '')}\r\n            {(share.episode.length >= 10) ? <span className='text-muted'>...</span> : ''}\r\n        </div>\r\n    </div>\r\n\r\n}\r\nexport default Modal","import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport {CharType} from \"../../TypeScript/Types\";\r\n\r\n\r\ntype propsType = {\r\n    data: CharType[],\r\n    shareChar: (index:number) => void\r\n}\r\n\r\n\r\nconst Main:React.FC< propsType> = ({data, shareChar}) => {\r\n    return <main>\r\n\r\n        <div className=\"row row-cols-xl-4   row-cols-md-3  g-4 col-md-offset-2\">\r\n            {\r\n                data.map((c: CharType, index: number) => <div style={{padding:10}}>\r\n                        <div key={c.id} className=\"card \">\r\n                            <div className=\"row \">\r\n                                <img src={c.image} className=\"img-fluid rounded-start\" alt={c.name}/>\r\n                                <div className=\"card-body\" style={{padding: '1rem 1.7rem'}}>\r\n                                    <h5 className=\"card-title\">{c.name}</h5>\r\n                                    <p className=\"card-text\">\r\n                                        status: <span className={classNames({\r\n                                        \"badge bg-secondary\": c.status === 'unknown',\r\n                                        \"badge bg-success\": c.status === 'Alive',\r\n                                        \"badge bg-danger\": c.status === 'Dead',\r\n                                    })}> {c.status}</span> <br/>\r\n                                        species: {c.species}<br/>\r\n                                        gender: {c.gender}<br/>\r\n                                        type: {c.type ? `${c.type} ` : ''}\r\n                                    </p>\r\n                                    <button onClick={() => shareChar(index)} className=\"btn btn-success\">Show more\r\n                                    </button>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n\r\n    </main>\r\n\r\n}\r\nexport default Main","import React, {useState} from \"react\";\r\n\r\n\r\ntype PropsType = {\r\n    list: Array<string>,\r\n    header: string,\r\n    getter: string,\r\n    setter: (s:string) => void,\r\n}\r\n\r\nconst FilterDrop: React.FC<PropsType> = ({getter, setter, list, header}) => {\r\n\r\n    const [toggleFilter, setToggleFilter] = useState(false)\r\n\r\n    return <div className=\"filtersDrop__wrap\">\r\n        <button className='btn btn-outline-success' onClick={() => setToggleFilter(!toggleFilter)}>{header}: {getter}\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\"\r\n                 className=\"bi bi-caret-down-fill\" viewBox=\"0 0 16 16\">\r\n                <path\r\n                    d=\"M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z\"/>\r\n            </svg>\r\n        </button>\r\n        {toggleFilter && <ul className='list-group filtersDrop'>\r\n            {list.map((value: string, index: number) => <li key={index} className='list-group-item'\r\n                                                            onClick={() => setter(value)}>{(value) ? value : 'all'}</li>)}\r\n\r\n        </ul>}\r\n\r\n\r\n    </div>\r\n}\r\nexport default FilterDrop","import React, {useRef} from \"react\";\r\nimport classNames from \"classnames\";\r\nimport FilterDrop from \"./FilterDrop\";\r\nimport {InfoType} from \"../../TypeScript/Types\";\r\n\r\ntype PropsType = {\r\n    info: InfoType,\r\n    changePage: (p: number) => void,\r\n    prevPage: () => void,\r\n    nextPage: () => void,\r\n    clearFilters: () => void,\r\n    searchWithFilters: () => void,\r\n    setGender: (s: string) => void,\r\n    setStatus: (s: string) => void,\r\n    setType: (s: string) => void,\r\n    setSpecies: (s: string) => void,\r\n    setName: (s: string) => void,\r\n    name: string,\r\n    type: string,\r\n    gender: string,\r\n    species: string,\r\n    status: string,\r\n    currentPage: number,\r\n}\r\n\r\nconst Nav: React.FC<PropsType> = ({\r\n                                      info, changePage, prevPage, currentPage, nextPage, status, setStatus, searchWithFilters,\r\n                                      clearFilters, setGender, gender, type, setType, name, setName, species, setSpecies\r\n                                  }) => {\r\n    const nameSearch = useRef<HTMLInputElement>(null)\r\n\r\n    let pages: number[] = [];\r\n    for (let i = 1; i <= info.pages; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    const statusList: Array<string> = ['', 'alive', 'dead', 'unknown']\r\n    const genderList: Array<string> = ['', 'male', 'female', 'genderless', 'unknown']\r\n    const speciesList: Array<string> = ['', 'Alien', 'Animal', 'Human', 'Humanoid', 'Poopybutthole', 'Mythological Creature', 'unknown']\r\n    const typeList: Array<string> = ['', 'Anime', 'Parasite', 'Monster', 'Conjoined twin', 'Turkey', 'Snake', 'Soulless Puppet', 'Sentient ant colony'\r\n        , 'Human Gazorpian', 'Boobie buyer reptilian', 'The Devil', ' Superhuman']\r\n\r\n    function updateNameSearch(): void {\r\n        if (null !== nameSearch.current) {\r\n            setName(nameSearch.current.value)\r\n        }\r\n    }\r\n\r\n    return <div className='mt-3'>\r\n        <h3 className='text-success mt-5'>Filters</h3>\r\n        <div className=\"filtersWrap flex-wrap\">\r\n\r\n\r\n            <FilterDrop list={statusList} getter={status} setter={setStatus} header='status'/>\r\n            <FilterDrop list={genderList} getter={gender} setter={setGender} header='gender'/>\r\n            <FilterDrop list={speciesList} getter={species} setter={setSpecies} header={'species'}/>\r\n            <FilterDrop list={typeList} getter={type} setter={setType} header={'types'}/>\r\n\r\n\r\n        </div>\r\n\r\n        <div className=\"  col-md-3\">\r\n            <label>Search by name</label>\r\n            <input onChange={updateNameSearch} ref={nameSearch} className=\"form-control me-2\" type=\"text\" value={name}\r\n                   placeholder=\"Search by name\"/>\r\n\r\n        </div>\r\n\r\n        <div className=\"mt-3\">\r\n            <button style={{'marginRight': 10}} className='btn btn-success ' onClick={searchWithFilters}>Search</button>\r\n            <button className='btn btn-danger  ' onClick={clearFilters}>Clear</button>\r\n        </div>\r\n\r\n        <nav className='mt-4  d-flex justify-content-center'>\r\n            <ul className=\"d-flex pagination flex-wrap justify-content-center\">\r\n                <li onClick={prevPage}\r\n                    className={classNames({\r\n                        'page-item': true,\r\n                        'disabled': info.prev === null,\r\n                    })}>\r\n                    <button className=\"page-link \">\r\n                                <span className={classNames({\r\n                                    'text-success': info.prev !== null\r\n                                })}>&laquo;</span>\r\n                    </button>\r\n                </li>\r\n                {pages.map((p: number) => {\r\n                    if ((p >= currentPage && p < currentPage + 10)) {\r\n                        return <li key={p} onClick={() => changePage(p)} className={classNames({\r\n                            'page-item': true,\r\n                        })}>\r\n                            <button className={classNames({\r\n                                'page-link': true,\r\n                                'bg-success': currentPage === p,\r\n                                'text-white': currentPage === p,\r\n                                'text-success': currentPage !== p,\r\n                            })}>{p}</button>\r\n                        </li>\r\n                    } else if ((p > info.pages - 10 && p <= info.pages) && currentPage > info.pages - 10 && currentPage <= info.pages) {\r\n                        return <li key={p} onClick={() => changePage(p)} className={classNames({\r\n                            'page-item': true,\r\n                        })}>\r\n                            <button className={classNames({\r\n                                'page-link': true,\r\n                                'bg-success': currentPage === p,\r\n                                'text-white': currentPage === p,\r\n                                'text-success': currentPage !== p,\r\n                            })}>{p}</button>\r\n                        </li>\r\n                    }\r\n                })}\r\n\r\n\r\n                <li onClick={nextPage}\r\n                    className={classNames({\r\n                        'page-item': true,\r\n                        'disabled': info.next === null,\r\n                    })}>\r\n                    <button className=\"page-link\">\r\n                                <span className={classNames({\r\n                                    'text-success': info.next !== null\r\n                                })}>&raquo;</span>\r\n                    </button>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n        <div>\r\n            Characters: {info.count}\r\n        </div>\r\n    </div>\r\n\r\n\r\n}\r\nexport default Nav","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport Modal from \"./components/Modal/Modal\";\nimport Main from \"./components/Main/Main\";\nimport Nav from './components/Nav/Nav';\nimport {CharType, InfoType} from \"./TypeScript/Types\";\n\nconst App: React.FC = () => {\n    const initialInfo: InfoType = {\n        count: 0,\n        next: '',\n        prev: '',\n        pages: 0,\n    }\n    const initialShare: CharType  = {\n        created: '',\n        episode: [],\n        gender: '',\n        id: 0,\n        image: '',\n        location: {\n            name: '',\n            url: '',\n        },\n        name: '',\n        origin: {\n            name: '',\n            url: '',\n        },\n        species: '',\n        status: '',\n        type: '',\n        url: '',\n    };\n    const [data, setData] = useState([])\n    const [info, setInfo] = useState(initialInfo)\n    const [share, setShare] = useState(initialShare)\n    const [currentPage, setCurrentPage] = useState(1)\n    const [toggleModal, setToggleModal] = useState(false)\n\n\n    const [name, setName] = useState('')\n    const [status, setStatus] = useState('')\n    const [species, setSpecies] = useState('')\n    const [type, setType] = useState('')\n    const [gender, setGender] = useState('')\n\n    const baseUrl: string = 'https://rickandmortyapi.com/api/character/';\n\n    useEffect(() => {\n        axios.get(baseUrl).then(res => {\n            setData(res.data.results)\n            setInfo(res.data.info)\n            setCurrentPage(1)\n        })\n\n    }, [])\n\n\n    function searchWithFilters(): void {\n\n        axios.get(baseUrl + `?page=1&name=${name}&status=${status}&species=${species}&type=${type}&gender=${gender}`).then(res => {\n            setData(res.data.results)\n            setInfo(res.data.info)\n            setCurrentPage(1)\n\n        })\n    }\n\n    function clearFilters(): void {\n        setName('')\n        setGender('')\n        setType('')\n        setStatus('')\n        setSpecies('')\n\n    }\n\n    console.log(info)\n\n    function nextPage(): void {\n        if (info.next === null) {\n            return\n        }\n        axios.get(info.next).then(res => {\n            setData(res.data.results)\n            setInfo(res.data.info)\n            setCurrentPage(currentPage + 1)\n\n        })\n    }\n\n    function prevPage(): void {\n        if (info.prev === null) {\n            return\n        }\n        axios.get(info.prev).then(res => {\n            setData(res.data.results)\n            setInfo(res.data.info)\n            setCurrentPage(currentPage - 1)\n        })\n    }\n\n    function changePage(p: number) {\n        if (p === currentPage) {\n            return\n        }\n        axios.get(`${baseUrl}?page=${p}&name=${name}&status=${status}&species=${species}&type${type}&gender=${gender}`).then(res => {\n            setData(res.data.results)\n            setInfo(res.data.info)\n            setCurrentPage(p)\n        })\n    }\n\n    function shareChar(index: number): void {\n        setShare(data[index])\n        setToggleModal(true)\n    }\n\n\n    return (\n        <div className=\"container-sm \">\n\n            <header className=\"App-header\">\n                <img alt='HeaderLogo' className='headerLogo'\n                     src='https://occ-0-1722-1723.1.nflxso.net/dnm/api/v6/LmEnxtiAuzezXBjYXPuDgfZ4zZQ/AAAABUmVLxeatH508rcDIJJz2cyvcGOzvAth5IzI5MrAJKYF_Od9t-t05i6neGRE8GUuTXqK_PwaWrp4PtcgHCq5FcrIJ32JKfRUPc4w.png?r=a66'/>\n\n            </header>\n\n            {\n                toggleModal && <Modal setToggleModal={setToggleModal} share={share}/>\n            }\n\n            <Nav\n                clearFilters={clearFilters}\n                setName={setName}\n                name={name}\n                setGender={setGender}\n                gender={gender}\n                setType={setType}\n                type={type}\n                setSpecies={setSpecies}\n                species={species}\n                searchWithFilters={searchWithFilters}\n                status={status}\n                setStatus={setStatus}\n                info={info}\n                currentPage={currentPage}\n                prevPage={prevPage}\n                changePage={changePage}\n                nextPage={nextPage}/>\n\n            <Main data={data} shareChar={shareChar}/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <App />  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}